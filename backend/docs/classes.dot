digraph "classes" {
rankdir=BT
charset="utf-8"
".T" [color="black", fontcolor="black", label=<{.T|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
".T" [color="black", fontcolor="black", label=<{.T|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
".T" [color="black", fontcolor="black", label=<{.T|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
".T" [color="black", fontcolor="black", label=<{.T|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
".T" [color="black", fontcolor="black", label=<{.T|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
".T1" [color="black", fontcolor="black", label=<{.T1|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
".T2" [color="black", fontcolor="black", label=<{.T2|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
".T3" [color="black", fontcolor="black", label=<{.T3|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
".T4" [color="black", fontcolor="black", label=<{.T4|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"_io.StringIO" [color="black", fontcolor="black", label=<{_io.StringIO|<br ALIGN="LEFT"/>|<I>close</I>()<br ALIGN="LEFT"/><I>detach</I>()<br ALIGN="LEFT"/><I>fileno</I>()<br ALIGN="LEFT"/><I>flush</I>()<br ALIGN="LEFT"/><I>getvalue</I>()<br ALIGN="LEFT"/><I>isatty</I>()<br ALIGN="LEFT"/><I>read</I>()<br ALIGN="LEFT"/><I>readable</I>()<br ALIGN="LEFT"/><I>readline</I>()<br ALIGN="LEFT"/><I>readlines</I>()<br ALIGN="LEFT"/><I>seek</I>()<br ALIGN="LEFT"/><I>seekable</I>()<br ALIGN="LEFT"/><I>tell</I>()<br ALIGN="LEFT"/><I>truncate</I>()<br ALIGN="LEFT"/><I>writable</I>()<br ALIGN="LEFT"/><I>write</I>()<br ALIGN="LEFT"/><I>writelines</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"_io._IOBase" [color="black", fontcolor="black", label=<{_io._IOBase|<br ALIGN="LEFT"/>|<I>close</I>()<br ALIGN="LEFT"/><I>fileno</I>()<br ALIGN="LEFT"/><I>flush</I>()<br ALIGN="LEFT"/><I>isatty</I>()<br ALIGN="LEFT"/><I>readable</I>()<br ALIGN="LEFT"/><I>readline</I>()<br ALIGN="LEFT"/><I>readlines</I>()<br ALIGN="LEFT"/><I>seek</I>()<br ALIGN="LEFT"/><I>seekable</I>()<br ALIGN="LEFT"/><I>tell</I>()<br ALIGN="LEFT"/><I>truncate</I>()<br ALIGN="LEFT"/><I>writable</I>()<br ALIGN="LEFT"/><I>writelines</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"_io._TextIOBase" [color="black", fontcolor="black", label=<{_io._TextIOBase|<br ALIGN="LEFT"/>|<I>close</I>()<br ALIGN="LEFT"/><I>detach</I>()<br ALIGN="LEFT"/><I>fileno</I>()<br ALIGN="LEFT"/><I>flush</I>()<br ALIGN="LEFT"/><I>isatty</I>()<br ALIGN="LEFT"/><I>read</I>()<br ALIGN="LEFT"/><I>readable</I>()<br ALIGN="LEFT"/><I>readline</I>()<br ALIGN="LEFT"/><I>readlines</I>()<br ALIGN="LEFT"/><I>seek</I>()<br ALIGN="LEFT"/><I>seekable</I>()<br ALIGN="LEFT"/><I>tell</I>()<br ALIGN="LEFT"/><I>truncate</I>()<br ALIGN="LEFT"/><I>writable</I>()<br ALIGN="LEFT"/><I>write</I>()<br ALIGN="LEFT"/><I>writelines</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"_thread.RLock" [color="black", fontcolor="black", label=<{_thread.RLock|<br ALIGN="LEFT"/>|<I>acquire</I>()<br ALIGN="LEFT"/><I>release</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"asyncio.locks.Event" [color="black", fontcolor="black", label=<{asyncio.locks.Event|<br ALIGN="LEFT"/>|clear()<br ALIGN="LEFT"/>is_set()<br ALIGN="LEFT"/>set()<br ALIGN="LEFT"/>wait()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chatroom.change.Change" [color="black", fontcolor="black", label=<{chatroom.change.Change|id<br ALIGN="LEFT"/>topic_name<br ALIGN="LEFT"/>|apply(old_value)<br ALIGN="LEFT"/>deserialize(change_dict: dict[str, Any]): Change<br ALIGN="LEFT"/><I>inverse</I>(): Change<br ALIGN="LEFT"/><I>serialize</I>(): dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chatroom.server.client_manager.ClientManager" [color="black", fontcolor="black", label=<{chatroom.server.client_manager.ClientManager|<br ALIGN="LEFT"/>|get_client_id_count()<br ALIGN="LEFT"/>handle_client(ws: WebSocketServerProtocol, path)<br ALIGN="LEFT"/>register_message_handler(message_type: str, handler: Callable[..., None | Awaitable[None]])<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>send(client: Client)<br ALIGN="LEFT"/>send_update(changes: List[Change], action_id: str)<br ALIGN="LEFT"/>set_client_id_count(id_count)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chatroom.server.server.ChatroomServer" [color="black", fontcolor="black", label=<{chatroom.server.server.ChatroomServer|T<br ALIGN="LEFT"/>do_after_transition<br ALIGN="LEFT"/>get_client_id_count<br ALIGN="LEFT"/>record<br ALIGN="LEFT"/>set_client_id_count<br ALIGN="LEFT"/>|add_topic(topic_name, type: type[T], init_value, is_stateful): T<br ALIGN="LEFT"/>emit(event_name: str)<br ALIGN="LEFT"/>on(event_name: str, callback: Callable, inverse_callback: Callable | None, is_stateful: bool)<br ALIGN="LEFT"/>redo(transition: Transition)<br ALIGN="LEFT"/>register_service(service_name: str, callback: Callable, pass_sender)<br ALIGN="LEFT"/>remove_topic(topic_name)<br ALIGN="LEFT"/>serve()<br ALIGN="LEFT"/>topic(topic_name, type: type[T]): T<br ALIGN="LEFT"/>undo(transition: Transition)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chatroom.state_machine.Phase.FORWARDING" [color="black", fontcolor="black", label=<{chatroom.state_machine.FORWARDING|name<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"chatroom.state_machine.Phase.IDLE" [color="black", fontcolor="black", label=<{chatroom.state_machine.IDLE|name<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"chatroom.state_machine.Phase" [color="black", fontcolor="black", label=<{chatroom.state_machine.Phase|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"chatroom.state_machine.RootNode" [color="black", fontcolor="black", label=<{chatroom.state_machine.RootNode|children : List[TreeNode]<br ALIGN="LEFT"/>is_root : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"chatroom.state_machine.StateMachine" [color="black", fontcolor="black", label=<{chatroom.state_machine.StateMachine|T<br ALIGN="LEFT"/>|add_topic(name: str, topic_type: type[T], is_stateful: bool, init_value: Any): T<br ALIGN="LEFT"/>add_topic_s(name: str, topic_type: str, is_stateful: bool, init_value: Any): Topic<br ALIGN="LEFT"/>apply_change(change: Change)<br ALIGN="LEFT"/>do_after_transition(task)<br ALIGN="LEFT"/>enter_emit_change()<br ALIGN="LEFT"/>get_topic(topic_name: str): Topic<br ALIGN="LEFT"/>has_topic(topic_name: str)<br ALIGN="LEFT"/>record(action_source: int, action_id: str, allow_reentry: bool, emit_transition: bool, phase: Phase)<br ALIGN="LEFT"/>redo(transition: Transition)<br ALIGN="LEFT"/>remove_topic(name: str)<br ALIGN="LEFT"/>undo(transition: Transition, action_source)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chatroom.state_machine.Tree" [color="black", fontcolor="black", label=<{chatroom.state_machine.Tree|changes_made : List[Change]<br ALIGN="LEFT"/>current_node<br ALIGN="LEFT"/>get_topic : Callable[[str], Topic]<br ALIGN="LEFT"/>root<br ALIGN="LEFT"/>|add_child_to_current(change: Change)<br ALIGN="LEFT"/>clear_subtree()<br ALIGN="LEFT"/>preorder_traversal(root: TreeNode | RootNode)<br ALIGN="LEFT"/>set_current(node: TreeNode)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chatroom.state_machine.TreeNode" [color="black", fontcolor="black", label=<{chatroom.state_machine.TreeNode|change<br ALIGN="LEFT"/>changes_made : List[Change]<br ALIGN="LEFT"/>children : List[TreeNode]<br ALIGN="LEFT"/>get_topic : Callable[[str], Topic]<br ALIGN="LEFT"/>is_root : bool<br ALIGN="LEFT"/>parent : TreeNode \| RootNode<br ALIGN="LEFT"/>|clear_subtree()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chatroom.topic.DictTopic" [color="black", fontcolor="black", label=<{chatroom.topic.DictTopic|on_add<br ALIGN="LEFT"/>on_change_value<br ALIGN="LEFT"/>on_remove<br ALIGN="LEFT"/>on_set<br ALIGN="LEFT"/>on_set2<br ALIGN="LEFT"/>|add(key, value)<br ALIGN="LEFT"/>change_value(key, value)<br ALIGN="LEFT"/>notify_listeners(change: Change, old_value: dict, new_value: dict)<br ALIGN="LEFT"/>remove(key)<br ALIGN="LEFT"/>set(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chatroom.topic.ListTopic" [color="black", fontcolor="black", label=<{chatroom.topic.ListTopic|on_insert<br ALIGN="LEFT"/>on_pop<br ALIGN="LEFT"/>|insert(item, position: int)<br ALIGN="LEFT"/>notify_listeners(change: Change, old_value: list, new_value: list)<br ALIGN="LEFT"/>pop(position: int)<br ALIGN="LEFT"/>remove(item)<br ALIGN="LEFT"/>set(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chatroom.topic.SetTopic" [color="black", fontcolor="black", label=<{chatroom.topic.SetTopic|on_append<br ALIGN="LEFT"/>on_remove<br ALIGN="LEFT"/>|append(item)<br ALIGN="LEFT"/>notify_listeners(change: Change, old_value: list, new_value: list)<br ALIGN="LEFT"/>remove(item)<br ALIGN="LEFT"/>set(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chatroom.topic.StringTopic" [color="black", fontcolor="black", label=<{chatroom.topic.StringTopic|<br ALIGN="LEFT"/>|set(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chatroom.topic.Topic" [color="black", fontcolor="black", label=<{chatroom.topic.Topic|on_set<br ALIGN="LEFT"/>on_set2<br ALIGN="LEFT"/>|add_validator(validator: Callable[[Any, Any, Change], bool])<br ALIGN="LEFT"/>apply_change(change: Change, notify_listeners: bool)<br ALIGN="LEFT"/>apply_change_external(change: Change)<br ALIGN="LEFT"/>get()<br ALIGN="LEFT"/>get_name()<br ALIGN="LEFT"/>get_type_name()<br ALIGN="LEFT"/>is_stateful()<br ALIGN="LEFT"/>notify_listeners(change: Change, old_value, new_value)<br ALIGN="LEFT"/><I>set</I>(value)<br ALIGN="LEFT"/>set_to_default()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"chatroom.utils.Action" [color="black", fontcolor="black", label=<{chatroom.utils.Action|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"collections.deque" [color="black", fontcolor="black", label=<{collections.deque|iterable : list<br ALIGN="LEFT"/>maxlen : int<br ALIGN="LEFT"/>|<I>append</I>(x)<br ALIGN="LEFT"/><I>appendleft</I>(x)<br ALIGN="LEFT"/><I>clear</I>()<br ALIGN="LEFT"/>copy()<br ALIGN="LEFT"/>count(x)<br ALIGN="LEFT"/><I>extend</I>(iterable)<br ALIGN="LEFT"/><I>extendleft</I>(iterable)<br ALIGN="LEFT"/>index(x, start, end)<br ALIGN="LEFT"/><I>insert</I>(i, x)<br ALIGN="LEFT"/>pop()<br ALIGN="LEFT"/>popleft()<br ALIGN="LEFT"/><I>remove</I>(value)<br ALIGN="LEFT"/>reverse()<br ALIGN="LEFT"/>rotate(n)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"enum.Enum" [color="black", fontcolor="black", label=<{enum.Enum|<br ALIGN="LEFT"/>|name()<br ALIGN="LEFT"/>value()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"grapycal.app.GrapycalApp" [color="black", fontcolor="black", label=<{grapycal.app.GrapycalApp|<br ALIGN="LEFT"/>|clean_unused_fetched_extensions()<br ALIGN="LEFT"/>parse_extensions_from_workspace(workspace_path: str): list[str]<br ALIGN="LEFT"/>run(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"grapycal.builtin_nodes.data.VariableNode" [color="black", fontcolor="black", label=<{grapycal.builtin_nodes.data.VariableNode|category : str<br ALIGN="LEFT"/>has_value : bool<br ALIGN="LEFT"/>in_port<br ALIGN="LEFT"/>out_port<br ALIGN="LEFT"/>text_control<br ALIGN="LEFT"/>value : NoneType<br ALIGN="LEFT"/>|build()<br ALIGN="LEFT"/>double_click()<br ALIGN="LEFT"/>edge_activated(edge: Edge, port: InputPort)<br ALIGN="LEFT"/>output_edge_added(edge: Edge, port: OutputPort)<br ALIGN="LEFT"/>pre_build(attribute_values: Dict[str, Any] | None, workspace, is_preview: bool)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"grapycal.builtin_nodes.function.math.AdditionNode" [color="black", fontcolor="black", label=<{grapycal.builtin_nodes.function.math.AdditionNode|category : str<br ALIGN="LEFT"/>input_edge_limit : list<br ALIGN="LEFT"/>inputs : list<br ALIGN="LEFT"/>outputs : list<br ALIGN="LEFT"/>|build()<br ALIGN="LEFT"/>calculate(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"grapycal.builtin_nodes.function.math.DivisionNode" [color="black", fontcolor="black", label=<{grapycal.builtin_nodes.function.math.DivisionNode|category : str<br ALIGN="LEFT"/>input_edge_limit : list<br ALIGN="LEFT"/>inputs : list<br ALIGN="LEFT"/>outputs : list<br ALIGN="LEFT"/>|build()<br ALIGN="LEFT"/>calculate(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"grapycal.builtin_nodes.function.math.MultiplicationNode" [color="black", fontcolor="black", label=<{grapycal.builtin_nodes.function.math.MultiplicationNode|category : str<br ALIGN="LEFT"/>input_edge_limit : list<br ALIGN="LEFT"/>inputs : list<br ALIGN="LEFT"/>outputs : list<br ALIGN="LEFT"/>|build()<br ALIGN="LEFT"/>calculate(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"grapycal.builtin_nodes.function.math.SubtractionNode" [color="black", fontcolor="black", label=<{grapycal.builtin_nodes.function.math.SubtractionNode|category : str<br ALIGN="LEFT"/>input_edge_limit : list<br ALIGN="LEFT"/>inputs : list<br ALIGN="LEFT"/>outputs : list<br ALIGN="LEFT"/>|build()<br ALIGN="LEFT"/>calculate(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"grapycal.builtin_nodes.interaction.evalNode.EvalNode" [color="black", fontcolor="black", label=<{grapycal.builtin_nodes.interaction.evalNode.EvalNode|category : str<br ALIGN="LEFT"/>has_value : bool<br ALIGN="LEFT"/>out_port<br ALIGN="LEFT"/>text_control<br ALIGN="LEFT"/>value : NoneType<br ALIGN="LEFT"/>|activate()<br ALIGN="LEFT"/>build()<br ALIGN="LEFT"/>double_click()<br ALIGN="LEFT"/>output_edge_added(edge: Edge, port: OutputPort)<br ALIGN="LEFT"/>pre_build(attribute_values, workspace, is_preview: bool)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"grapycal.builtin_nodes.interaction.execNode.ExecNode" [color="black", fontcolor="black", label=<{grapycal.builtin_nodes.interaction.execNode.ExecNode|category : str<br ALIGN="LEFT"/>has_value : bool<br ALIGN="LEFT"/>out_port<br ALIGN="LEFT"/>text_control<br ALIGN="LEFT"/>value : NoneType<br ALIGN="LEFT"/>|activate()<br ALIGN="LEFT"/>build()<br ALIGN="LEFT"/>double_click()<br ALIGN="LEFT"/>output_edge_added(edge: Edge, port: OutputPort)<br ALIGN="LEFT"/>pre_build(attribute_values, workspace, is_preview: bool)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"grapycal.builtin_nodes.interaction.printNode.PrintNode" [color="black", fontcolor="black", label=<{grapycal.builtin_nodes.interaction.printNode.PrintNode|category : str<br ALIGN="LEFT"/>text_control<br ALIGN="LEFT"/>|build()<br ALIGN="LEFT"/>edge_activated(edge, port)<br ALIGN="LEFT"/>input_edge_added(edge: Edge, port: InputPort)<br ALIGN="LEFT"/>input_edge_removed(edge: Edge, port: InputPort)<br ALIGN="LEFT"/>pre_build(attribute_values, workspace, is_preview: bool)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"grapycal.builtin_nodes.procedural.ForNode" [color="black", fontcolor="black", label=<{grapycal.builtin_nodes.procedural.ForNode|category : str<br ALIGN="LEFT"/>item_port<br ALIGN="LEFT"/>iterable_port<br ALIGN="LEFT"/>iterator : Optional[Iterable \| None]<br ALIGN="LEFT"/>run_port<br ALIGN="LEFT"/>|build()<br ALIGN="LEFT"/>edge_activated(edge, port)<br ALIGN="LEFT"/>next()<br ALIGN="LEFT"/>pre_build(attribute_values, workspace, is_preview: bool)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"grapycal.core.background_runner.BackgroundRunner" [color="black", fontcolor="black", label=<{grapycal.core.background_runner.BackgroundRunner|<br ALIGN="LEFT"/>|exit()<br ALIGN="LEFT"/>interrupt()<br ALIGN="LEFT"/>no_interrupt()<br ALIGN="LEFT"/>push(task: Callable, to_queue: bool)<br ALIGN="LEFT"/>push_to_queue(task: Callable)<br ALIGN="LEFT"/>push_to_stack(task: Callable)<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>set_exception_callback(callback: Callable[[Exception], None])<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"grapycal.core.local.Local" [color="black", fontcolor="black", label=<{grapycal.core.local.Local|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"grapycal.core.local.LocalManager" [color="black", fontcolor="black", label=<{grapycal.core.local.LocalManager|locals : list<br ALIGN="LEFT"/>|cleanup(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"grapycal.core.local.LocalProxy" [color="black", fontcolor="black", label=<{grapycal.core.local.LocalProxy|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"grapycal.core.local.LocalStack" [color="black", fontcolor="black", label=<{grapycal.core.local.LocalStack|top<br ALIGN="LEFT"/>|pop(): T \| None<br ALIGN="LEFT"/>push(obj: T): list[T]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"grapycal.core.local._ProxyIOp" [color="black", fontcolor="black", label=<{grapycal.core.local._ProxyIOp|bind_f<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"grapycal.core.local._ProxyLookup" [color="black", fontcolor="black", label=<{grapycal.core.local._ProxyLookup|bind_f : NoneType<br ALIGN="LEFT"/>class_value : Optional[t.Any \| None]<br ALIGN="LEFT"/>fallback : Optional[t.Callable \| None]<br ALIGN="LEFT"/>is_attr : bool<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"grapycal.core.workspace.Workspace" [color="black", fontcolor="black", label=<{grapycal.core.workspace.Workspace|background_runner<br ALIGN="LEFT"/>do_after_transition<br ALIGN="LEFT"/>path<br ALIGN="LEFT"/>redirect<br ALIGN="LEFT"/>running_module<br ALIGN="LEFT"/>|exit()<br ALIGN="LEFT"/>get_communication_event_loop(): asyncio.AbstractEventLoop<br ALIGN="LEFT"/>get_workspace_object(): WorkspaceObject<br ALIGN="LEFT"/>initialize_workspace(): None<br ALIGN="LEFT"/>load_workspace(path: str): None<br ALIGN="LEFT"/>run(): None<br ALIGN="LEFT"/>save_workspace(path: str): None<br ALIGN="LEFT"/>vars(): Dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"grapycal.extension.extension.Extension" [color="black", fontcolor="black", label=<{grapycal.extension.extension.Extension|extension_name : str<br ALIGN="LEFT"/>module : NoneType<br ALIGN="LEFT"/>node_types : Dict[str, type[Node]]<br ALIGN="LEFT"/>node_types_without_extension_name : Dict[str, type[Node]]<br ALIGN="LEFT"/>package_name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"grapycal.extension.extensionManager.ExtensionManager" [color="black", fontcolor="black", label=<{grapycal.extension.extensionManager.ExtensionManager|<br ALIGN="LEFT"/>|get_extension(name: str): Extension<br ALIGN="LEFT"/>get_extention_names(): list[str]<br ALIGN="LEFT"/>import_extension(package_name: str): Extension<br ALIGN="LEFT"/>load_extensions(extension_names): None<br ALIGN="LEFT"/>unimport_extension(extension_name: str): None<br ALIGN="LEFT"/>update_extension(extension_name: str): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"grapycal.sobjects.controls.control.Control" [color="black", fontcolor="black", label=<{grapycal.sobjects.controls.control.Control|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"grapycal.sobjects.controls.textControl.TextControl" [color="black", fontcolor="black", label=<{grapycal.sobjects.controls.textControl.TextControl|editable<br ALIGN="LEFT"/>frontend_type : str<br ALIGN="LEFT"/>label<br ALIGN="LEFT"/>text<br ALIGN="LEFT"/>|pre_build(attribute_values: Dict[str, Any] | None, text, label, editable)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"grapycal.sobjects.edge.Edge" [color="black", fontcolor="black", label=<{grapycal.sobjects.edge.Edge|frontend_type : str<br ALIGN="LEFT"/>head<br ALIGN="LEFT"/>reaquirable : bool<br ALIGN="LEFT"/>tail<br ALIGN="LEFT"/>|destroy(): SObjectSerialized<br ALIGN="LEFT"/>get_data(): Any<br ALIGN="LEFT"/>is_activated()<br ALIGN="LEFT"/>is_data_ready()<br ALIGN="LEFT"/>on_head_set(old_head: Port | None, new_head: InputPort | None)<br ALIGN="LEFT"/>on_tail_set(old_tail: Port | None, new_tail: Port | None)<br ALIGN="LEFT"/>pre_build(attribute_values: dict[str, Any] | None, workspace, tail: OutputPort | None, head: InputPort | None)<br ALIGN="LEFT"/>push_data(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"grapycal.sobjects.editor.Editor" [color="black", fontcolor="black", label=<{grapycal.sobjects.editor.Editor|frontend_type : str<br ALIGN="LEFT"/>|create_edge(tail: OutputPort, head: InputPort): Edge<br ALIGN="LEFT"/>create_node(node_type: type): Node<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"grapycal.sobjects.functionNode.FunctionNode" [color="black", fontcolor="black", label=<{grapycal.sobjects.functionNode.FunctionNode|input_edge_limit : list<br ALIGN="LEFT"/>inputs : list<br ALIGN="LEFT"/>outputs : list<br ALIGN="LEFT"/>|build()<br ALIGN="LEFT"/>calculate(data: list[Any])<br ALIGN="LEFT"/>edge_activated(edge: Edge, port)<br ALIGN="LEFT"/>input_edge_added(edge: Edge, port)<br ALIGN="LEFT"/>input_edge_removed(edge: Edge, port)<br ALIGN="LEFT"/>output_edge_added(edge: Edge, port)<br ALIGN="LEFT"/>pre_build(attribute_values, workspace, is_preview: bool)<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"grapycal.sobjects.node.Node" [color="black", fontcolor="black", label=<{grapycal.sobjects.node.Node|T<br ALIGN="LEFT"/>category : str<br ALIGN="LEFT"/>category_<br ALIGN="LEFT"/>controls : ObjListTopic[Control]<br ALIGN="LEFT"/>display_ports<br ALIGN="LEFT"/>editor : NoneType<br ALIGN="LEFT"/>frontend_type : str<br ALIGN="LEFT"/>in_ports : ObjListTopic[InputPort]<br ALIGN="LEFT"/>is_preview<br ALIGN="LEFT"/>label<br ALIGN="LEFT"/>label_offset<br ALIGN="LEFT"/>out_ports : ObjListTopic[OutputPort]<br ALIGN="LEFT"/>output<br ALIGN="LEFT"/>shape<br ALIGN="LEFT"/>translation<br ALIGN="LEFT"/>use_transform<br ALIGN="LEFT"/>workspace : str<br ALIGN="LEFT"/>workspace_object<br ALIGN="LEFT"/>|add_control(control_type: type[T]): T<br ALIGN="LEFT"/>add_in_port(name, max_edges)<br ALIGN="LEFT"/>add_out_port(name, max_edges)<br ALIGN="LEFT"/><I>build</I>()<br ALIGN="LEFT"/>destroy(): SObjectSerialized<br ALIGN="LEFT"/><I>double_click</I>()<br ALIGN="LEFT"/><I>edge_activated</I>(edge: Edge, port: InputPort)<br ALIGN="LEFT"/><I>input_edge_added</I>(edge: Edge, port: InputPort)<br ALIGN="LEFT"/><I>input_edge_removed</I>(edge: Edge, port: InputPort)<br ALIGN="LEFT"/><I>output_edge_added</I>(edge: Edge, port: OutputPort)<br ALIGN="LEFT"/><I>output_edge_removed</I>(edge: Edge, port: OutputPort)<br ALIGN="LEFT"/><I>post_build</I>()<br ALIGN="LEFT"/>pre_build(attribute_values: Dict[str, Any] | None, workspace: 'Workspace', is_preview: bool)<br ALIGN="LEFT"/>redirect_output()<br ALIGN="LEFT"/>run_directly(task)<br ALIGN="LEFT"/>run_in_background(task, to_queue)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"grapycal.sobjects.port.InputPort" [color="black", fontcolor="black", label=<{grapycal.sobjects.port.InputPort|<br ALIGN="LEFT"/>|add_edge(edge)<br ALIGN="LEFT"/>is_all_edge_ready()<br ALIGN="LEFT"/>pre_build(attribute_values: dict[str, Any] | None, workspace, name, max_edges)<br ALIGN="LEFT"/>remove_edge(edge)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"grapycal.sobjects.port.OutputPort" [color="black", fontcolor="black", label=<{grapycal.sobjects.port.OutputPort|<br ALIGN="LEFT"/>|add_edge(edge)<br ALIGN="LEFT"/>pre_build(attribute_values: dict[str, Any] | None, workspace, name, max_edges)<br ALIGN="LEFT"/>remove_edge(edge)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"grapycal.sobjects.port.Port" [color="black", fontcolor="black", label=<{grapycal.sobjects.port.Port|edges : List[Edge]<br ALIGN="LEFT"/>frontend_type : str<br ALIGN="LEFT"/>max_edges<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>node<br ALIGN="LEFT"/>|add_edge(edge)<br ALIGN="LEFT"/>pre_build(attribute_values: dict[str, Any] | None, workspace, name, max_edges)<br ALIGN="LEFT"/>remove_edge(edge)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"grapycal.sobjects.sidebar.Sidebar" [color="black", fontcolor="black", label=<{grapycal.sobjects.sidebar.Sidebar|frontend_type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"grapycal.sobjects.simpleNode.SimpleNode" [color="black", fontcolor="black", label=<{grapycal.sobjects.simpleNode.SimpleNode|background : bool<br ALIGN="LEFT"/>|activate()<br ALIGN="LEFT"/>double_click()<br ALIGN="LEFT"/><I>run</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"grapycal.sobjects.workspaceObject.WorkspaceObject" [color="black", fontcolor="black", label=<{grapycal.sobjects.workspaceObject.WorkspaceObject|frontend_type : str<br ALIGN="LEFT"/>main_editor : ObjTopic[Editor]<br ALIGN="LEFT"/>sidebar : NoneType<br ALIGN="LEFT"/>|build()<br ALIGN="LEFT"/>post_build()<br ALIGN="LEFT"/>pre_build(attribute_values: Dict[str, Any] | None)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"grapycal.utils.io.OutputStream" [color="black", fontcolor="black", label=<{grapycal.utils.io.OutputStream|<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>disable_flush()<br ALIGN="LEFT"/>enable_flush()<br ALIGN="LEFT"/>flush()<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>set_event_loop(event_loop)<br ALIGN="LEFT"/>write(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"grapycal.utils.logging.ConsoleLogFormatter" [color="black", fontcolor="black", label=<{grapycal.utils.logging.ConsoleLogFormatter|FORMATS : dict<br ALIGN="LEFT"/>blue : str<br ALIGN="LEFT"/>bold : str<br ALIGN="LEFT"/>bold_red : str<br ALIGN="LEFT"/>format_<br ALIGN="LEFT"/>green : str<br ALIGN="LEFT"/>grey : str<br ALIGN="LEFT"/>no_bold : str<br ALIGN="LEFT"/>red : str<br ALIGN="LEFT"/>reset : str<br ALIGN="LEFT"/>yellow : str<br ALIGN="LEFT"/>|format(record)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"grapycal.utils.logging.NameTranslator" [color="black", fontcolor="black", label=<{grapycal.utils.logging.NameTranslator|dictionary : dict<br ALIGN="LEFT"/>|filter(record)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"itertools.count" [color="black", fontcolor="black", label=<{itertools.count|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"logging.Filter" [color="black", fontcolor="black", label=<{logging.Filter|name : str<br ALIGN="LEFT"/>nlen<br ALIGN="LEFT"/>|filter(record)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"logging.Formatter" [color="black", fontcolor="black", label=<{logging.Formatter|converter<br ALIGN="LEFT"/>datefmt : NoneType<br ALIGN="LEFT"/>default_msec_format : str<br ALIGN="LEFT"/>default_time_format : str<br ALIGN="LEFT"/>|format(record)<br ALIGN="LEFT"/>formatException(ei)<br ALIGN="LEFT"/>formatMessage(record)<br ALIGN="LEFT"/>formatStack(stack_info)<br ALIGN="LEFT"/>formatTime(record, datefmt)<br ALIGN="LEFT"/>usesTime()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"logging.PercentStyle" [color="black", fontcolor="black", label=<{logging.PercentStyle|asctime_format : str<br ALIGN="LEFT"/>asctime_search : str<br ALIGN="LEFT"/>default_format : str<br ALIGN="LEFT"/>validation_pattern<br ALIGN="LEFT"/>|format(record)<br ALIGN="LEFT"/>usesTime()<br ALIGN="LEFT"/>validate()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"objectsync.history.History" [color="black", fontcolor="black", label=<{objectsync.history.History|chain : List[HistoryItem], list<br ALIGN="LEFT"/>|add(transition: Transition)<br ALIGN="LEFT"/>redo(): Transition \| None<br ALIGN="LEFT"/>undo(): Transition \| None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"objectsync.server.Server" [color="black", fontcolor="black", label=<{objectsync.server.Server|T<br ALIGN="LEFT"/>do_after_transition<br ALIGN="LEFT"/>get_client_id_count<br ALIGN="LEFT"/>record<br ALIGN="LEFT"/>set_client_id_count<br ALIGN="LEFT"/>|create_object(type: type[T], parent_id: str, id: str | None, serialized: SObjectSerialized | None): T<br ALIGN="LEFT"/>create_object_s(type: str, parent_id: str, id: str | None, serialized: SObjectSerialized | None): SObject<br ALIGN="LEFT"/>create_topic(topic_name, topic_type: type[T], init_value, is_stateful): T<br ALIGN="LEFT"/>destroy_object(id: str)<br ALIGN="LEFT"/>emit(event_name)<br ALIGN="LEFT"/>get_all_node_types(): Dict[str, type[SObject]]<br ALIGN="LEFT"/>get_id_count()<br ALIGN="LEFT"/>get_object(id: str): SObject<br ALIGN="LEFT"/>get_object_type(name: str): type[SObject]<br ALIGN="LEFT"/>get_object_type_name(type: type[SObject]): str<br ALIGN="LEFT"/>get_objects(): List[SObject]<br ALIGN="LEFT"/>get_root_object(): SObject<br ALIGN="LEFT"/>get_topic(topic_name, type: type[T]): T<br ALIGN="LEFT"/>on(event_name: str, callback: Callable, inverse_callback: Callable | None, is_stateful: bool)<br ALIGN="LEFT"/>register(object_type: type[SObject], name: str)<br ALIGN="LEFT"/>remove_topic(topic_name)<br ALIGN="LEFT"/>serve()<br ALIGN="LEFT"/>set_id_count(count: int)<br ALIGN="LEFT"/>unregister(object_type: type[SObject] | str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"objectsync.sobject.SObject" [color="black", fontcolor="black", label=<{objectsync.sobject.SObject|T<br ALIGN="LEFT"/>T1<br ALIGN="LEFT"/>T2<br ALIGN="LEFT"/>T3<br ALIGN="LEFT"/>T4<br ALIGN="LEFT"/>frontend_type : str<br ALIGN="LEFT"/>history<br ALIGN="LEFT"/>|add_attribute(topic_name, topic_type: type[T1], init_value, is_stateful): T1<br ALIGN="LEFT"/>add_child(type: type[T]): T<br ALIGN="LEFT"/>add_tag(tag)<br ALIGN="LEFT"/><I>build</I>()<br ALIGN="LEFT"/>destroy(): SObjectSerialized<br ALIGN="LEFT"/>emit(event_name)<br ALIGN="LEFT"/>get_child_of_type(type: type[T2]): T2<br ALIGN="LEFT"/>get_children()<br ALIGN="LEFT"/>get_children_of_type(type: type[T3]): list[T3]<br ALIGN="LEFT"/>get_id()<br ALIGN="LEFT"/>get_parent()<br ALIGN="LEFT"/>get_type_name()<br ALIGN="LEFT"/>has_tag(tag)<br ALIGN="LEFT"/>initialize(serialized: SObjectSerialized | None, prebuild_kwargs: Dict[str, Any])<br ALIGN="LEFT"/>is_root()<br ALIGN="LEFT"/>on(event_name: str, callback: Callable, inverse_callback: Callable | None, is_stateful: bool)<br ALIGN="LEFT"/><I>post_build</I>()<br ALIGN="LEFT"/><I>pre_build</I>(attribute_values: Dict[str, Any] | None)<br ALIGN="LEFT"/>remove_tag(tag)<br ALIGN="LEFT"/>serialize(): SObjectSerialized<br ALIGN="LEFT"/>top_down_search(accept: Callable[['SObject'], bool] | None, stop: Callable[['SObject'], bool] | None, type: type[T4]): list[T4]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"objectsync.topic.ObjDictTopic" [color="black", fontcolor="black", label=<{objectsync.topic.ObjDictTopic|on_add<br ALIGN="LEFT"/>on_change_value<br ALIGN="LEFT"/>on_remove<br ALIGN="LEFT"/>on_set<br ALIGN="LEFT"/>on_set2<br ALIGN="LEFT"/>|add(key, value: T)<br ALIGN="LEFT"/>change_value(key, value: T)<br ALIGN="LEFT"/>get()<br ALIGN="LEFT"/>get_type_name()<br ALIGN="LEFT"/>notify_listeners(change: Change, old_value: dict, new_value: dict)<br ALIGN="LEFT"/>remove(key)<br ALIGN="LEFT"/>set(objects: dict)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"objectsync.topic.ObjListTopic" [color="black", fontcolor="black", label=<{objectsync.topic.ObjListTopic|on_insert<br ALIGN="LEFT"/>on_pop<br ALIGN="LEFT"/>on_set<br ALIGN="LEFT"/>on_set2<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>get_type_name()<br ALIGN="LEFT"/>insert(object: T, position: int)<br ALIGN="LEFT"/>remove(object: T)<br ALIGN="LEFT"/>set(objects: List[T])<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"objectsync.topic.ObjSetTopic" [color="black", fontcolor="black", label=<{objectsync.topic.ObjSetTopic|on_append<br ALIGN="LEFT"/>on_remove<br ALIGN="LEFT"/>on_set<br ALIGN="LEFT"/>on_set2<br ALIGN="LEFT"/>|append(object: T)<br ALIGN="LEFT"/>get()<br ALIGN="LEFT"/>get_type_name()<br ALIGN="LEFT"/>remove(object: T)<br ALIGN="LEFT"/>set(objects: List[T])<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"objectsync.topic.ObjTopic" [color="black", fontcolor="black", label=<{objectsync.topic.ObjTopic|on_set<br ALIGN="LEFT"/>on_set2<br ALIGN="LEFT"/>|get()<br ALIGN="LEFT"/>get_type_name()<br ALIGN="LEFT"/>map(value: str)<br ALIGN="LEFT"/>set(object: T)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"queue.Queue" [color="black", fontcolor="black", label=<{queue.Queue|all_tasks_done<br ALIGN="LEFT"/>maxsize : int<br ALIGN="LEFT"/>mutex<br ALIGN="LEFT"/>not_empty<br ALIGN="LEFT"/>not_full<br ALIGN="LEFT"/>queue<br ALIGN="LEFT"/>unfinished_tasks : int<br ALIGN="LEFT"/>|empty()<br ALIGN="LEFT"/>full()<br ALIGN="LEFT"/>get(block, timeout)<br ALIGN="LEFT"/>get_nowait()<br ALIGN="LEFT"/>join()<br ALIGN="LEFT"/>put(item, block, timeout)<br ALIGN="LEFT"/>put_nowait(item)<br ALIGN="LEFT"/>qsize()<br ALIGN="LEFT"/>task_done()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"threading.Condition" [color="black", fontcolor="black", label=<{threading.Condition|acquire<br ALIGN="LEFT"/>release<br ALIGN="LEFT"/>|notify(n)<br ALIGN="LEFT"/>notifyAll()<br ALIGN="LEFT"/>notify_all()<br ALIGN="LEFT"/>wait(timeout)<br ALIGN="LEFT"/>wait_for(predicate, timeout)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"threading._RLock" [color="black", fontcolor="black", label=<{threading._RLock|<br ALIGN="LEFT"/>|acquire(blocking, timeout)<br ALIGN="LEFT"/>release()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"threading.lock" [color="black", fontcolor="black", label=<{threading.lock|<br ALIGN="LEFT"/>|acquire(blocking, timeout)<br ALIGN="LEFT"/>locked()<br ALIGN="LEFT"/><I>release</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"typing.Generic" [color="black", fontcolor="black", label=<{typing.Generic|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"_io.StringIO" -> "_io._TextIOBase" [arrowhead="empty", arrowtail="none"];
"_io._TextIOBase" -> "_io._IOBase" [arrowhead="empty", arrowtail="none"];
"chatroom.state_machine.Phase" -> "enum.Enum" [arrowhead="empty", arrowtail="none"];
"chatroom.state_machine.Phase.FORWARDING" -> "enum.Enum" [arrowhead="empty", arrowtail="none"];
"chatroom.state_machine.Phase.IDLE" -> "enum.Enum" [arrowhead="empty", arrowtail="none"];
"chatroom.state_machine.RootNode" -> "chatroom.state_machine.TreeNode" [arrowhead="empty", arrowtail="none"];
"chatroom.topic.DictTopic" -> "chatroom.topic.Topic" [arrowhead="empty", arrowtail="none"];
"chatroom.topic.ListTopic" -> "chatroom.topic.Topic" [arrowhead="empty", arrowtail="none"];
"chatroom.topic.SetTopic" -> "chatroom.topic.Topic" [arrowhead="empty", arrowtail="none"];
"chatroom.topic.StringTopic" -> "chatroom.topic.Topic" [arrowhead="empty", arrowtail="none"];
"grapycal.builtin_nodes.data.VariableNode" -> "grapycal.sobjects.node.Node" [arrowhead="empty", arrowtail="none"];
"grapycal.builtin_nodes.function.math.AdditionNode" -> "grapycal.sobjects.functionNode.FunctionNode" [arrowhead="empty", arrowtail="none"];
"grapycal.builtin_nodes.function.math.DivisionNode" -> "grapycal.sobjects.functionNode.FunctionNode" [arrowhead="empty", arrowtail="none"];
"grapycal.builtin_nodes.function.math.MultiplicationNode" -> "grapycal.sobjects.functionNode.FunctionNode" [arrowhead="empty", arrowtail="none"];
"grapycal.builtin_nodes.function.math.SubtractionNode" -> "grapycal.sobjects.functionNode.FunctionNode" [arrowhead="empty", arrowtail="none"];
"grapycal.builtin_nodes.interaction.evalNode.EvalNode" -> "grapycal.sobjects.node.Node" [arrowhead="empty", arrowtail="none"];
"grapycal.builtin_nodes.interaction.execNode.ExecNode" -> "grapycal.sobjects.node.Node" [arrowhead="empty", arrowtail="none"];
"grapycal.builtin_nodes.interaction.printNode.PrintNode" -> "grapycal.sobjects.node.Node" [arrowhead="empty", arrowtail="none"];
"grapycal.builtin_nodes.procedural.ForNode" -> "grapycal.sobjects.node.Node" [arrowhead="empty", arrowtail="none"];
"grapycal.core.local.LocalProxy" -> "typing.Generic" [arrowhead="empty", arrowtail="none"];
"grapycal.core.local.LocalStack" -> "typing.Generic" [arrowhead="empty", arrowtail="none"];
"grapycal.core.local._ProxyIOp" -> "grapycal.core.local._ProxyLookup" [arrowhead="empty", arrowtail="none"];
"grapycal.sobjects.controls.control.Control" -> "objectsync.sobject.SObject" [arrowhead="empty", arrowtail="none"];
"grapycal.sobjects.controls.textControl.TextControl" -> "grapycal.sobjects.controls.control.Control" [arrowhead="empty", arrowtail="none"];
"grapycal.sobjects.edge.Edge" -> "objectsync.sobject.SObject" [arrowhead="empty", arrowtail="none"];
"grapycal.sobjects.editor.Editor" -> "objectsync.sobject.SObject" [arrowhead="empty", arrowtail="none"];
"grapycal.sobjects.functionNode.FunctionNode" -> "grapycal.sobjects.simpleNode.SimpleNode" [arrowhead="empty", arrowtail="none"];
"grapycal.sobjects.node.Node" -> "objectsync.sobject.SObject" [arrowhead="empty", arrowtail="none"];
"grapycal.sobjects.port.InputPort" -> "grapycal.sobjects.port.Port" [arrowhead="empty", arrowtail="none"];
"grapycal.sobjects.port.OutputPort" -> "grapycal.sobjects.port.Port" [arrowhead="empty", arrowtail="none"];
"grapycal.sobjects.port.Port" -> "objectsync.sobject.SObject" [arrowhead="empty", arrowtail="none"];
"grapycal.sobjects.sidebar.Sidebar" -> "objectsync.sobject.SObject" [arrowhead="empty", arrowtail="none"];
"grapycal.sobjects.simpleNode.SimpleNode" -> "grapycal.sobjects.node.Node" [arrowhead="empty", arrowtail="none"];
"grapycal.sobjects.workspaceObject.WorkspaceObject" -> "objectsync.sobject.SObject" [arrowhead="empty", arrowtail="none"];
"grapycal.utils.logging.ConsoleLogFormatter" -> "logging.Formatter" [arrowhead="empty", arrowtail="none"];
"grapycal.utils.logging.NameTranslator" -> "logging.Filter" [arrowhead="empty", arrowtail="none"];
"objectsync.topic.ObjDictTopic" -> "typing.Generic" [arrowhead="empty", arrowtail="none"];
"objectsync.topic.ObjListTopic" -> "typing.Generic" [arrowhead="empty", arrowtail="none"];
"objectsync.topic.ObjSetTopic" -> "typing.Generic" [arrowhead="empty", arrowtail="none"];
"objectsync.topic.ObjTopic" -> "typing.Generic" [arrowhead="empty", arrowtail="none"];
".T" -> "chatroom.server.server.ChatroomServer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="T", style="solid"];
".T" -> "chatroom.state_machine.StateMachine" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="T", style="solid"];
".T" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="T", style="solid"];
".T" -> "objectsync.server.Server" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="T", style="solid"];
".T" -> "objectsync.sobject.SObject" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="T", style="solid"];
".T1" -> "objectsync.sobject.SObject" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="T1", style="solid"];
".T2" -> "objectsync.sobject.SObject" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="T2", style="solid"];
".T3" -> "objectsync.sobject.SObject" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="T3", style="solid"];
".T4" -> "objectsync.sobject.SObject" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="T4", style="solid"];
"_io.StringIO" -> "grapycal.utils.io.OutputStream" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_stream", style="solid"];
"_thread.RLock" -> "chatroom.state_machine.StateMachine" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_lock", style="solid"];
"asyncio.locks.Event" -> "grapycal.utils.io.OutputStream" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_enable_flush_event", style="solid"];
"chatroom.server.client_manager.ClientManager" -> "chatroom.server.server.ChatroomServer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_client_manager", style="solid"];
"chatroom.server.server.ChatroomServer" -> "objectsync.server.Server" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_chatroom", style="solid"];
"chatroom.state_machine.Phase" -> "chatroom.state_machine.StateMachine" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_phase", style="solid"];
"chatroom.state_machine.Phase.IDLE" -> "chatroom.state_machine.StateMachine" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_phase", style="solid"];
"chatroom.state_machine.RootNode" -> "chatroom.state_machine.Tree" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="root", style="solid"];
"chatroom.state_machine.RootNode" -> "chatroom.state_machine.Tree" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="current_node", style="solid"];
"chatroom.state_machine.StateMachine" -> "chatroom.server.server.ChatroomServer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_state_machine", style="solid"];
"chatroom.state_machine.Tree" -> "chatroom.state_machine.StateMachine" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transition_tree", style="solid"];
"chatroom.topic.DictTopic" -> "chatroom.server.server.ChatroomServer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_topic_list", style="solid"];
"chatroom.utils.Action" -> "chatroom.topic.DictTopic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="on_set", style="solid"];
"chatroom.utils.Action" -> "chatroom.topic.DictTopic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="on_set2", style="solid"];
"chatroom.utils.Action" -> "chatroom.topic.DictTopic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="on_add", style="solid"];
"chatroom.utils.Action" -> "chatroom.topic.DictTopic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="on_add", style="solid"];
"chatroom.utils.Action" -> "chatroom.topic.DictTopic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="on_remove", style="solid"];
"chatroom.utils.Action" -> "chatroom.topic.DictTopic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="on_remove", style="solid"];
"chatroom.utils.Action" -> "chatroom.topic.DictTopic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="on_change_value", style="solid"];
"chatroom.utils.Action" -> "chatroom.topic.ListTopic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="on_insert", style="solid"];
"chatroom.utils.Action" -> "chatroom.topic.ListTopic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="on_pop", style="solid"];
"chatroom.utils.Action" -> "chatroom.topic.SetTopic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="on_append", style="solid"];
"chatroom.utils.Action" -> "chatroom.topic.SetTopic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="on_remove", style="solid"];
"chatroom.utils.Action" -> "chatroom.topic.Topic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="on_set", style="solid"];
"chatroom.utils.Action" -> "chatroom.topic.Topic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="on_set2", style="solid"];
"chatroom.utils.Action" -> "objectsync.topic.ObjDictTopic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="on_set", style="solid"];
"chatroom.utils.Action" -> "objectsync.topic.ObjDictTopic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="on_set2", style="solid"];
"chatroom.utils.Action" -> "objectsync.topic.ObjDictTopic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="on_add", style="solid"];
"chatroom.utils.Action" -> "objectsync.topic.ObjDictTopic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="on_remove", style="solid"];
"chatroom.utils.Action" -> "objectsync.topic.ObjDictTopic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="on_change_value", style="solid"];
"chatroom.utils.Action" -> "objectsync.topic.ObjListTopic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="on_set", style="solid"];
"chatroom.utils.Action" -> "objectsync.topic.ObjListTopic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="on_set2", style="solid"];
"chatroom.utils.Action" -> "objectsync.topic.ObjListTopic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="on_insert", style="solid"];
"chatroom.utils.Action" -> "objectsync.topic.ObjListTopic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="on_pop", style="solid"];
"chatroom.utils.Action" -> "objectsync.topic.ObjSetTopic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="on_set", style="solid"];
"chatroom.utils.Action" -> "objectsync.topic.ObjSetTopic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="on_set2", style="solid"];
"chatroom.utils.Action" -> "objectsync.topic.ObjSetTopic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="on_append", style="solid"];
"chatroom.utils.Action" -> "objectsync.topic.ObjSetTopic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="on_remove", style="solid"];
"chatroom.utils.Action" -> "objectsync.topic.ObjTopic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="on_set", style="solid"];
"chatroom.utils.Action" -> "objectsync.topic.ObjTopic" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="on_set2", style="solid"];
"collections.deque" -> "asyncio.locks.Event" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_waiters", style="solid"];
"collections.deque" -> "grapycal.core.background_runner.BackgroundRunner" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_queue", style="solid"];
"collections.deque" -> "grapycal.core.background_runner.BackgroundRunner" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_stack", style="solid"];
"collections.deque" -> "queue.Queue" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="queue", style="solid"];
"collections.deque" -> "threading.Condition" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_waiters", style="solid"];
"grapycal.core.background_runner.BackgroundRunner" -> "grapycal.core.workspace.Workspace" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="background_runner", style="solid"];
"grapycal.core.local._ProxyIOp" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__iadd__", style="solid"];
"grapycal.core.local._ProxyIOp" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__isub__", style="solid"];
"grapycal.core.local._ProxyIOp" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__imul__", style="solid"];
"grapycal.core.local._ProxyIOp" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__imatmul__", style="solid"];
"grapycal.core.local._ProxyIOp" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__itruediv__", style="solid"];
"grapycal.core.local._ProxyIOp" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__ifloordiv__", style="solid"];
"grapycal.core.local._ProxyIOp" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__imod__", style="solid"];
"grapycal.core.local._ProxyIOp" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__ipow__", style="solid"];
"grapycal.core.local._ProxyIOp" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__ilshift__", style="solid"];
"grapycal.core.local._ProxyIOp" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__irshift__", style="solid"];
"grapycal.core.local._ProxyIOp" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__iand__", style="solid"];
"grapycal.core.local._ProxyIOp" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__ixor__", style="solid"];
"grapycal.core.local._ProxyIOp" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__ior__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__doc__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__wrapped__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__repr__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__str__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__bytes__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__format__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__lt__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__le__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__eq__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__ne__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__gt__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__ge__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__hash__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__bool__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__getattr__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__setattr__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__delattr__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__dir__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__class__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__instancecheck__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__subclasscheck__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__call__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__len__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__length_hint__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__getitem__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__setitem__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__delitem__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__iter__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__next__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__reversed__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__contains__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__add__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__sub__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__mul__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__matmul__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__truediv__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__floordiv__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__mod__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__divmod__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__pow__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__lshift__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__rshift__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__and__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__xor__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__or__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__radd__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__rsub__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__rmul__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__rmatmul__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__rtruediv__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__rfloordiv__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__rmod__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__rdivmod__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__rpow__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__rlshift__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__rrshift__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__rand__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__rxor__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__ror__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__neg__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__pos__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__abs__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__invert__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__complex__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__int__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__float__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__index__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__round__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__trunc__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__floor__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__ceil__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__enter__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__exit__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__await__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__aiter__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__anext__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__aenter__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__aexit__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__copy__", style="solid"];
"grapycal.core.local._ProxyLookup" -> "grapycal.core.local.LocalProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="__deepcopy__", style="solid"];
"grapycal.extension.extensionManager.ExtensionManager" -> "grapycal.core.workspace.Workspace" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_extention_manager", style="solid"];
"grapycal.sobjects.node.Node" -> "grapycal.sobjects.port.Port" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="node", style="solid"];
"grapycal.utils.io.OutputStream" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_output_stream", style="solid"];
"itertools.count" -> "chatroom.server.client_manager.ClientManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_client_id_count", style="solid"];
"itertools.count" -> "chatroom.server.client_manager.ClientManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_client_id_count", style="solid"];
"logging.PercentStyle" -> "logging.Formatter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_style", style="solid"];
"objectsync.history.History" -> "objectsync.sobject.SObject" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="history", style="solid"];
"objectsync.server.Server" -> "grapycal.core.workspace.Workspace" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_objectsync", style="solid"];
"objectsync.sobject.SObject" -> "objectsync.server.Server" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_root_object", style="solid"];
"objectsync.topic.ObjDictTopic" -> "grapycal.sobjects.controls.textControl.TextControl" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="text", style="solid"];
"objectsync.topic.ObjDictTopic" -> "grapycal.sobjects.controls.textControl.TextControl" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="label", style="solid"];
"objectsync.topic.ObjDictTopic" -> "grapycal.sobjects.controls.textControl.TextControl" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="editable", style="solid"];
"objectsync.topic.ObjDictTopic" -> "grapycal.sobjects.edge.Edge" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tail", style="solid"];
"objectsync.topic.ObjDictTopic" -> "grapycal.sobjects.edge.Edge" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="head", style="solid"];
"objectsync.topic.ObjDictTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="use_transform", style="solid"];
"objectsync.topic.ObjDictTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="display_ports", style="solid"];
"objectsync.topic.ObjDictTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shape", style="solid"];
"objectsync.topic.ObjDictTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="output", style="solid"];
"objectsync.topic.ObjDictTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="label", style="solid"];
"objectsync.topic.ObjDictTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="label_offset", style="solid"];
"objectsync.topic.ObjDictTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="translation", style="solid"];
"objectsync.topic.ObjDictTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="is_preview", style="solid"];
"objectsync.topic.ObjDictTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="category_", style="solid"];
"objectsync.topic.ObjDictTopic" -> "grapycal.sobjects.port.Port" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="name", style="solid"];
"objectsync.topic.ObjDictTopic" -> "grapycal.sobjects.port.Port" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="max_edges", style="solid"];
"objectsync.topic.ObjListTopic" -> "grapycal.sobjects.controls.textControl.TextControl" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="text", style="solid"];
"objectsync.topic.ObjListTopic" -> "grapycal.sobjects.controls.textControl.TextControl" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="label", style="solid"];
"objectsync.topic.ObjListTopic" -> "grapycal.sobjects.controls.textControl.TextControl" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="editable", style="solid"];
"objectsync.topic.ObjListTopic" -> "grapycal.sobjects.edge.Edge" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tail", style="solid"];
"objectsync.topic.ObjListTopic" -> "grapycal.sobjects.edge.Edge" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="head", style="solid"];
"objectsync.topic.ObjListTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="use_transform", style="solid"];
"objectsync.topic.ObjListTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="display_ports", style="solid"];
"objectsync.topic.ObjListTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shape", style="solid"];
"objectsync.topic.ObjListTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="output", style="solid"];
"objectsync.topic.ObjListTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="label", style="solid"];
"objectsync.topic.ObjListTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="label_offset", style="solid"];
"objectsync.topic.ObjListTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="translation", style="solid"];
"objectsync.topic.ObjListTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="is_preview", style="solid"];
"objectsync.topic.ObjListTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="category_", style="solid"];
"objectsync.topic.ObjListTopic" -> "grapycal.sobjects.port.Port" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="name", style="solid"];
"objectsync.topic.ObjListTopic" -> "grapycal.sobjects.port.Port" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="max_edges", style="solid"];
"objectsync.topic.ObjSetTopic" -> "grapycal.sobjects.controls.textControl.TextControl" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="text", style="solid"];
"objectsync.topic.ObjSetTopic" -> "grapycal.sobjects.controls.textControl.TextControl" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="label", style="solid"];
"objectsync.topic.ObjSetTopic" -> "grapycal.sobjects.controls.textControl.TextControl" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="editable", style="solid"];
"objectsync.topic.ObjSetTopic" -> "grapycal.sobjects.edge.Edge" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tail", style="solid"];
"objectsync.topic.ObjSetTopic" -> "grapycal.sobjects.edge.Edge" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="head", style="solid"];
"objectsync.topic.ObjSetTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="use_transform", style="solid"];
"objectsync.topic.ObjSetTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="display_ports", style="solid"];
"objectsync.topic.ObjSetTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shape", style="solid"];
"objectsync.topic.ObjSetTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="output", style="solid"];
"objectsync.topic.ObjSetTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="label", style="solid"];
"objectsync.topic.ObjSetTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="label_offset", style="solid"];
"objectsync.topic.ObjSetTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="translation", style="solid"];
"objectsync.topic.ObjSetTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="is_preview", style="solid"];
"objectsync.topic.ObjSetTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="category_", style="solid"];
"objectsync.topic.ObjSetTopic" -> "grapycal.sobjects.port.Port" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="name", style="solid"];
"objectsync.topic.ObjSetTopic" -> "grapycal.sobjects.port.Port" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="max_edges", style="solid"];
"objectsync.topic.ObjTopic" -> "grapycal.sobjects.controls.textControl.TextControl" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="text", style="solid"];
"objectsync.topic.ObjTopic" -> "grapycal.sobjects.controls.textControl.TextControl" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="label", style="solid"];
"objectsync.topic.ObjTopic" -> "grapycal.sobjects.controls.textControl.TextControl" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="editable", style="solid"];
"objectsync.topic.ObjTopic" -> "grapycal.sobjects.edge.Edge" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tail", style="solid"];
"objectsync.topic.ObjTopic" -> "grapycal.sobjects.edge.Edge" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="head", style="solid"];
"objectsync.topic.ObjTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="use_transform", style="solid"];
"objectsync.topic.ObjTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="display_ports", style="solid"];
"objectsync.topic.ObjTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shape", style="solid"];
"objectsync.topic.ObjTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="output", style="solid"];
"objectsync.topic.ObjTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="label", style="solid"];
"objectsync.topic.ObjTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="label_offset", style="solid"];
"objectsync.topic.ObjTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="translation", style="solid"];
"objectsync.topic.ObjTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="is_preview", style="solid"];
"objectsync.topic.ObjTopic" -> "grapycal.sobjects.node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="category_", style="solid"];
"objectsync.topic.ObjTopic" -> "grapycal.sobjects.port.Port" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="name", style="solid"];
"objectsync.topic.ObjTopic" -> "grapycal.sobjects.port.Port" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="max_edges", style="solid"];
"queue.Queue" -> "grapycal.core.background_runner.BackgroundRunner" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_inputs", style="solid"];
"threading.Condition" -> "queue.Queue" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="not_empty", style="solid"];
"threading.Condition" -> "queue.Queue" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="not_full", style="solid"];
"threading.Condition" -> "queue.Queue" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="all_tasks_done", style="solid"];
"threading._RLock" -> "chatroom.state_machine.StateMachine" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_lock", style="solid"];
"threading.lock" -> "grapycal.utils.io.OutputStream" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_lock", style="solid"];
"threading.lock" -> "queue.Queue" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="mutex", style="solid"];
"_thread.RLock" -> "threading.Condition" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_lock", style="solid"];
"chatroom.change.Change" -> "chatroom.state_machine.TreeNode" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="change", style="solid"];
"chatroom.state_machine.Phase.FORWARDING" -> "chatroom.state_machine.StateMachine" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_phase", style="solid"];
"chatroom.state_machine.RootNode" -> "chatroom.state_machine.Tree" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="current_node", style="solid"];
"chatroom.state_machine.StateMachine" -> "chatroom.topic.Topic" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_state_machine", style="solid"];
"chatroom.state_machine.TreeNode" -> "chatroom.state_machine.Tree" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="current_node", style="solid"];
"chatroom.topic.DictTopic" -> "objectsync.topic.ObjDictTopic" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_topic", style="solid"];
"chatroom.topic.ListTopic" -> "objectsync.topic.ObjListTopic" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_topic", style="solid"];
"chatroom.topic.SetTopic" -> "objectsync.topic.ObjSetTopic" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_topic", style="solid"];
"chatroom.topic.StringTopic" -> "objectsync.topic.ObjTopic" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_topic", style="solid"];
"objectsync.server.Server" -> "grapycal.extension.extensionManager.ExtensionManager" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_objectsync", style="solid"];
"objectsync.server.Server" -> "objectsync.sobject.SObject" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_server", style="solid"];
"threading._RLock" -> "threading.Condition" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_lock", style="solid"];
}
